# k3d configuration file, saved as e.g. ${D2K_CONFIG_ENV_PATH}/${D2K_CONFIG_CLUSTER_NAME} https://k3d.io/v5.4.1/usage/configfile/
apiVersion: k3d.io/v1alpha4 # this will change in the future as we make everything more stable
kind: Simple # internally, we also have a Cluster config, which is not yet available externally
metadata:
  name: ${D2K_CONFIG_CLUSTER_NAME} # name that you want to give to your cluster (will still be prefixed with `k3d-`)
servers: ${D2K_CONFIG_CLUSTER_SERVERS_NODES} # same as `--servers 1`
agents: ${D2K_CONFIG_CLUSTER_AGENTS_NODES} # same as `--agents 2`
image: rancher/k3s:latest # same as `--image rancher/k3s:v1.20.4-k3s1`
network: ${D2K_CONFIG_CLUSTER_NETWORK_NAME} # same as `--network my-custom-net`
kubeAPI: # same as `--api-port myhost.my.domain:6445` (where the name would resolve to 127.0.0.1)
  host: "${D2K_CONFIG_CLUSTER_API_HOST}"     # important for the `server` setting in the kubeconfig
  hostIP: ${D2K_CONFIG_CLUSTER_API_IP}       # where the Kubernetes API will be listening on
  hostPort: 5010-5050 # ${D2K_CONFIG_CLUSTER_API_PORT} # where the Kubernetes API listening port will be mapped to on your host system
volumes: # repeatable flags are represented as YAML lists
  # - volume: ${D2K_CONFIG_ENV_PATH}/${D2K_CONFIG_CLUSTER_NAME}/manifests:/var/lib/rancher/k3s/server/manifests
  - volume: ${D2K_CONFIG_ENV_PATH}/${D2K_CONFIG_CLUSTER_NAME}/volumes/shared:/shared-pv # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
    nodeFilters:
      - server:*
      - agent:*
  - volume: ${D2K_CONFIG_ENV_PATH}/${D2K_CONFIG_CLUSTER_NAME}/volumes/data:/data-pv # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
    nodeFilters:
      - server:*
      - agent:*
  - volume: ${D2K_CONFIG_ENV_PATH}/${D2K_CONFIG_CLUSTER_NAME}/logs:/d2k-logs # same as `--volume '/my/host/path:/path/in/node@server:0;agent:*'`
    nodeFilters:
      - server:*
      - agent:*
ports:
  - port: ${D2K_CONFIG_CLUSTER_PORTS_HTTP}:80 # same as `--port '8080:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
  - port: ${D2K_CONFIG_CLUSTER_PORTS_HTTPS}:443 # same as `--port '8080:443@loadbalancer'`
    nodeFilters:
      - loadbalancer
env:
  - envVar: d2k=d8g2k8s
    nodeFilters:
      - server:*
      - agent:*
hostAliases: # /etc/hosts style entries to be injected into /etc/hosts in the node containers and in the NodeHosts section in CoreDNS
  - ip: 1.1.1.1
    hostnames:
      - cloud.flare.dns
options:
  k3d: # k3d runtime settings
    wait: false # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "60s" # wait timeout before aborting; same as `--timeout 60s`
    disableLoadbalancer: false # same as `--no-lb`
    disableImageVolume: false # same as `--no-image-volume`
    disableRollback: false # same as `--no-Rollback`
    loadbalancer:
      configOverrides:
        - settings.workerConnections=2048
  k3s: # options passed on to K3s itself
    extraArgs: # additional arguments passed to the `k3s server|agent` command; same as `--k3s-arg`
      - arg: --tls-san=${D2K_CONFIG_CLUSTER_NETWORK_EXTERNAL_HOST} #--tls-san=${D2K_CONFIG_CLUSTER_DOMAIN}
        nodeFilters:
          - server:*
      - arg: --no-deploy=servicelb,traefik
        nodeFilters:
          - server:*
      - arg: --disable=servicelb,traefik
        nodeFilters:
          - server:*
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)